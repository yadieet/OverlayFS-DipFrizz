#!/bin/bash


##
# External scripts, too lazy to make another services
#/boot/scripts/disable_disk_writes_cache
#/boot/scripts/irq_patch
##


## File: /boot/over/mount-overlayfs

## YSA OverlayFS DipFrizz (v1.0.7.3)
## Boot and running GNU/Linux system READ ONLY using OverlayFS
## -- https://github.com/yadieet/OverlayFS-DipFrizz
## -- yadieet sa <yadieet@gmail.com>

# Default mode : Keep Session
mode=2

# Log file
logfile="/tmp/DipFrizz.log"

# Sub directories of root partition to be overlayed
rpsdirs=(\
"usr" \
"etc" \
"mnt" \
"root" \
"opt" \
"srv" \
)

# Separate partitions of root subdirs
spmdirs=(\
"var" \
"home" \
)

# Separate partition uuids of root subdirs
spuuids=(\
"5147dfb7-a198-4e27-8e00-f29c752a427f" \
"574eceb8-4fe5-494f-a194-5399ccdec9be" \
)

# Script-home partition & directory
ocpuuid="69c91ae4-ffa5-49ae-a088-13e7b35d027d"
ocdir="/boot/over"

# Target partition (partition label), mountpoint dir, work dir
oplabel="UF32-OFS"
opmp="/boot/over/n"
olwdir="$opmp/lay"

# Printout configuration
date +"%A, %-d %B %Y - %T %Z" >> "$logfile"
echo "===================================================" >> "$logfile"
echo "YSA OverlayFS DipFrizz" >> "$logfile"
echo "Boot and running GNU/Linux system READ ONLY using OverlayFS" >> "$logfile"
echo "-- yadieet sa <yadieet@gmail.com>" >> "$logfile"
echo >> "$logfile"
echo "Log File : $logfile" >> "$logfile"

echo -n "RPS dirs : " >> "$logfile"
for rpsdir in "${rpsdirs[@]}"; do echo -n "$rpsdir " >> "$logfile"; done

echo -ne "\nSPM dirs : " >> "$logfile"
for spmdir in "${spmdirs[@]}"; do echo -n "$spmdir " >> "$logfile"; done

echo -e "\nSP uuids :" >> "$logfile"
for spuuid in "${spuuids[@]}"; do echo "           $spuuid" >> "$logfile"; done

echo -e "\nOCP uuid : $ocpuuid" >> "$logfile"
echo "OC dir   : $ocdir" >> "$logfile"
echo "OP label : $oplabel" >> "$logfile"
echo "OP mp    : $opmp" >> "$logfile"
echo "OL wdir  : $olwdir" >> "$logfile"
echo "===================================================" >> "$logfile"

function tweak_afterCreateNewSession()
{
	echo "Tweaking afterCreateNewSession.." >> "$logfile"

	
}

function tweak_afterMountOP()
{
	echo "Tweaking afterMountOP.." >> "$logfile"

	#"$opmp/delete-junks"


	#rm -rf /home/yadieet/.cache
	#rm -rf /home/yadieet/.TelegramDesktop
	#rm -rf /home/yadieet/.telegram-cli
	#ln -s "$opmp/.cache" /home/yadieet/.cache
	#ln -s "$opmp/.TelegramDesktop" /home/yadieet/.TelegramDesktop
	#ln -s "$opmp/.telegram-cli" /home/yadieet/.telegram-cli
	
	#rm -rf /var/cache/squid
	#ln -s /boot/over/n/squid-cache /var/cache/squid
}

function newSession()
{
	echo "Creating new session.." >> "$logfile"

	rm -rf "$olwdir/work"
	mkdir "$olwdir/work"

	for rpsdir in "${rpsdirs[@]}"; do
		rm -rf "$olwdir/$rpsdir"
		mkdir  "$olwdir/$rpsdir"
		mkdir  "$olwdir/work/$rpsdir"
	done

	for spmdir in "${spmdirs[@]}"; do
		rm -rf "$olwdir/$spmdir"
		mkdir  "$olwdir/$spmdir"
		mkdir  "$olwdir/work/$spmdir"
	done
	
	# TWEAKZ
	tweak_afterCreateNewSession	
}

function checkSession()
{
	echo "Checking session.." >> "$logfile"

	if [[ ! -e "$ocdir/DO-NOT-DELETE-ME" ]]; then return 0; fi
		a=`cat "$ocdir/DO-NOT-DELETE-ME"`
	if [[ -z $a ]]; then return 1; fi

	if [[ ! -e "$olwdir/DO-NOT-DELETE-ME" ]]; then return 0; fi
		b=`cat "$olwdir/DO-NOT-DELETE-ME"`
	if [[ -z $b ]]; then return 1; fi

	if [[ $a != $b ]]; then return 1; fi

	return 2
}

function deleteSID()
{
	echo "Deleting SID on '$ocdir'.." >> "$logfile"
	mount -o remount,rw,noatime "/dev/disk/by-uuid/$ocpuuid"
	rm "$ocdir/DO-NOT-DELETE-ME"
	mount -o remount,ro,noatime "/dev/disk/by-uuid/$ocpuuid"
}


# Check overlay target partition
if [[ ! -e "/dev/disk/by-label/$oplabel" ]]; then
	deleteSID
	echo "Partition labelled '$oplabel' is not exist." >> "$logfile"
	echo "YSA OverlayFS is not active on this boot." >> "$logfile"
	echo "Warning: For next boot, any session WILL be invalid and destroyed." >> "$logfile"
	echo "Finished." >> "$logfile"
	exit
fi


# Always fsck
echo "Fsck on partition labelled '$oplabel'.." >> "$logfile"
fsck.ext4 -fy "/dev/disk/by-label/$oplabel"


# Mount overlay target partition
echo "Mounting partition labelled '$oplabel'.." >> "$logfile"
if [[ ! -d $opmp ]]; then
	deleteSID
	echo "Error, mountpoint dir '$opmp' is not exist." >> "$logfile"
	echo "YSA OverlayFS is not active on this boot. " >> "$logfile"
	echo "Warning: For next boot, any session WILL be invalid and destroyed." >> "$logfile"
	echo "Finished." >> "$logfile"
	exit
fi
mount -t ext4 -o rw,noatime "/dev/disk/by-label/$oplabel" "$opmp"
mkdir -p "$olwdir"


# TWEAKZ
tweak_afterMountOP


# Check request disable
if [[ -e "$olwdir/act/disable" || ! -z $(cat /proc/cmdline |grep " disable-ofs \| disable-ofs$") ]]; then
	echo "File '$olwdir/disable' exist, or 'disable-ofs' kernel boot param exist. Cancelled." >> "$logfile"
	echo "YSA OverlayFS is not active on this boot. " >> "$logfile"
	echo "Warning: For next boot, any session WILL be invalid and destroyed." >> "$logfile"
	echo "Finished." >> "$logfile"
	exit
fi


# Check DipFrizz mode
if [[ -e "$olwdir/act/DipFrizz" ]]; then
	mode=1
fi
echo -n "Mode     : " >> "$logfile"
[[ $mode == 1 ]] && echo "DipFrizz"  >> "$logfile" || echo "Keep Session" >> "$logfile"


# Check session
if [[ $mode == 2 ]]; then
	checkSession
	isValid=$?

	if [[ $isValid != 2 ]]; then
		echo "Session invalid." >> "$logfile"
		newSession
	else
		echo "Session valid." >> "$logfile"
	fi
else
	newSession
fi


echo "Saving SID.." >> "$logfile"
mount -o remount,rw,noatime "/dev/disk/by-uuid/$ocpuuid"
id=`date +%s`
echo $id > "$ocdir/DO-NOT-DELETE-ME"
if [[ $mode == 2 ]]; then
	echo $id > "$olwdir/DO-NOT-DELETE-ME"
else
	echo 0 > "$olwdir/DO-NOT-DELETE-ME"
fi
mount -o remount,ro,noatime "/dev/disk/by-uuid/$ocpuuid"


echo "Applying overlayfs.." >> "$logfile"
mount -o remount,ro,noatime /
for (( i=0; i<${#rpsdirs[@]}; i++ )) do
	mount -t overlay -olowerdir="/${rpsdirs[$i]}",upperdir="$olwdir/${rpsdirs[$i]}",workdir="$olwdir/work/${rpsdirs[$i]}",noatime overlay "/${rpsdirs[$i]}"
done
for (( i=0; i<${#spmdirs[@]}; i++ )) do
	umount "/${spmdirs[$i]}"
	mkdir  "/mnt/.[${spmdirs[$i]}]"
	mount -t ext4 -o ro,noatime "/dev/disk/by-uuid/${spuuids[$i]}" "/mnt/.[${spmdirs[$i]}]"
	mount -t overlay -olowerdir="/mnt/.[${spmdirs[$i]}]",upperdir="$olwdir/${spmdirs[$i]}",workdir="$olwdir/work/${spmdirs[$i]}",noatime overlay "/${spmdirs[$i]}"
done


echo "Finished." >> "$logfile"
echo "===================================================" >> "$logfile"
echo "`mount |grep '/dev/sd\|overlay' |sort`" >> "$logfile"
echo "===================================================" >> "$logfile"
cat "$logfile" |grep "overlay on" |wc -l >> "$logfile"
